var fs 		= require( "fs" ),
	sys,
	tool,
	grunt,
	config,
	E;
E = function( x ){
	grunt.log.writeln( x );
};
tool = {
	config : function(){
		config = {
			pwd 	: false,
			files 	: []
		};
	},
	/*!
	 *	串联文件
	 *	@files 		{array}		待串联的文件集合
	 *	@replace 	{object} 	replace 的配置文件
	 */
	concat 	: function( files , replace , dest ){
		var _buffer = [],
			_url;
		for( var i = files.length; i--; ){
			_url 	= replace.src + files[ i ];
			if( grunt.file.exists( _url ) ){
				_buffer.push( grunt.file.read( _url ).toString().replace( /\s+/gi , "" ) );
			};
		};
		grunt.file.write( dest , _buffer.join( "" ) );
	},
	/*!
	 *	替换文本中的 JS项
	 *	@content 	{string}	待替换的内容文本
	 *	@replace 	{object} 	replace 的配置文件
	 */
	replace_js : function( content , replace ){
		var _replace	= replace.key + "$1" + replace.key;
			_al 		= content.replace( /(<script[^\\>]*><\/script>)/gi , _replace ).split( replace.key ),
			_js 		= [],
			_url 		= replace.dest + "js/" + replace.md5 + ".js";
		for( var i = _al.length; i--; ){
			if( i % 2 ){
				_js.push( _al[ i ].replace( /.*src=['|"](.*)['|"].*/gi , "$1" ) );
				_al[ i ] = i == 1 ? "<script type='text/javascript' src='" + _url + "'></script>" : "";
			};
		};
		replace.js = _url;
		tool.concat( _js , replace , _url );
		return _al.join( "" );
	},
	/*!
	 *	替换文本中的 css项
	 *	@content 	{string}	待替换的内容文本
	 *	@replace 	{object} 	replace 的配置文件
	 */
	replace_css: function( content , replace ){
		var _replace	= replace.key + "$1" + replace.key;
			_al 		= content.replace( /(<link[^>]*>)/gi , _replace ).split( replace.key ),
			_css 		= [],
			_url 		= replace.dest + "css/" + replace.md5 + ".css";
		for( var i = _al.length; i--; ){
			if( i % 2 ){
				_css.push( _al[ i ].replace( /.*href=['|"](.*)['|"].*/gi , "$1" ) );
				_al[ i ] = i == 1 ? "<link rel='stylesheet' type='text/css' href='" + _url + "'>" : "";
			};
		};
		replace.css = _url;
		tool.concat( _css , replace , _url );
		return _al.join( "" );
	},
	/*!
	 *	替换html的 起点
	 *	@fp 	{string} 	文件路径 filepath
	 *	@dest	{string} 	替换的目标位置
	 */
	replace 	: function( fp , dest ){
		var _content 	= grunt.file.read( fp ).toString().
							replace( /\s+/gi , " " ).
								replace( />\s+</gi , "><" ),
			_replace 	= { 
				js 	: 0 , 
				css : 0 ,
				fp 	: fp,
				src : fp.replace( /(.*[\/|\\]).*$/g , "$1" ),
				dest: dest, 
				key : ( new Date() ).getTime(),
				md5 : "MKJHKAHJKHUIIUOFNMLJK"
			};
			_content 	= tool.replace_css( _content , _replace ),
			_content 	= tool.replace_js( _content , _replace );
		E( dest );
		E( _replace.src );
		grunt.file.write( dest + _replace.src , _content );
	},
	init : function(){
		sys.files.forEach( function( file ){
			var _files 	= file.src;
			_files.filter( function( fp ){
				return /\.html$/gi.test( fp ) ? true : false;
			} ).map( function( fp ){
				tool.replace( fp , "pub/" );
			} );
		} );
	}
};

module.exports = function( __grunt ){
	grunt = __grunt;
	grunt.registerMultiTask( "orgin" , "Test" , function(){
		sys = this;
		tool.init();
	} );	
};